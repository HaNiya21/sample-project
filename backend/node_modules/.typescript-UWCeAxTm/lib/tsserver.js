/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tsserver/server.ts
var server_exports = {};
__export(server_exports, {
  ANONYMOUS: () => ANONYMOUS,
  AccessFlags: () => AccessFlags,
  AssertionLevel: () => AssertionLevel,
  AssignmentDeclarationKind: () => AssignmentDeclarationKind,
  AssignmentKind: () => AssignmentKind,
  Associativity: () => Associativity,
  BreakpointResolver: () => ts_BreakpointResolver_exports,
  BuilderFileEmit: () => BuilderFileEmit,
  BuilderProgramKind: () => BuilderProgramKind,
  BuilderState: () => BuilderState,
  BundleFileSectionKind: () => BundleFileSectionKind,
  CallHierarchy: () => ts_CallHierarchy_exports,
  CharacterCodes: () => CharacterCodes,
  CheckFlags: () => CheckFlags,
  CheckMode: () => CheckMode,
  ClassificationType: () => ClassificationType,
  ClassificationTypeNames: () => ClassificationTypeNames,
  CommentDirectiveType: () => CommentDirectiveType,
  Comparison: () => Comparison,
  CompletionInfoFlags: () => CompletionInfoFlags,
  CompletionTriggerKind: () => CompletionTriggerKind,
  Completions: () => ts_Completions_exports,
  ContainerFlags: () => ContainerFlags,
  ContextFlags: () => ContextFlags,
  Debug: () => Debug,
  DiagnosticCategory: () => DiagnosticCategory,
  Diagnostics: () => Diagnostics,
  DocumentHighlights: () => DocumentHighlights,
  ElementFlags: () => ElementFlags,
  EmitFlags: () => EmitFlags,
  EmitHint: () => EmitHint,
  EmitOnly: () => EmitOnly,
  EndOfLineState: () => EndOfLineState,
  EnumKind: () => EnumKind,
  ExitStatus: () => ExitStatus,
  ExportKind: () => ExportKind,
  Extension: () => Extension,
  ExternalEmitHelpers: () => ExternalEmitHelpers,
  FileIncludeKind: () => FileIncludeKind,
  FilePreprocessingDiagnosticsKind: () => FilePreprocessingDiagnosticsKind,
  FileSystemEntryKind: () => FileSystemEntryKind,
  FileWatcherEventKind: () => FileWatcherEventKind,
  FindAllReferences: () => ts_FindAllReferences_exports,
  FlattenLevel: () => FlattenLevel,
  FlowFlags: () => FlowFlags,
  ForegroundColorEscapeSequences: () => ForegroundColorEscapeSequences,
  FunctionFlags: () => FunctionFlags,
  GeneratedIdentifierFlags: () => GeneratedIdentifierFlags,
  GetLiteralTextFlags: () => GetLiteralTextFlags,
  GoToDefinition: () => ts_GoToDefinition_exports,
  HighlightSpanKind: () => HighlightSpanKind,
  IdentifierNameMap: () => IdentifierNameMap,
  IdentifierNameMultiMap: () => IdentifierNameMultiMap,
  ImportKind: () => ImportKind,
  ImportsNotUsedAsValues: () => ImportsNotUsedAsValues,
  IndentStyle: () => IndentStyle,
  IndexFlags: () => IndexFlags,
  IndexKind: () => IndexKind,
  InferenceFlags: () => InferenceFlags,
  InferencePriority: () => InferencePriority,
  InlayHintKind: () => InlayHintKind,
  InlayHints: () => ts_InlayHints_exports,
  InternalEmitFlags: () => InternalEmitFlags,
  InternalSymbolName: () => InternalSymbolName,
  InvalidatedProjectKind: () => InvalidatedProjectKind,
  JSDocParsingMode: () => JSDocParsingMode,
  JsDoc: () => ts_JsDoc_exports,
  JsTyping: () => ts_JsTyping_exports,
  JsxEmit: () => JsxEmit,
  JsxFlags: () => JsxFlags,
  JsxReferenceKind: () => JsxReferenceKind,
  LanguageServiceMode: () => LanguageServiceMode,
  LanguageVariant: () => LanguageVariant,
  LexicalEnvironmentFlags: () => LexicalEnvironmentFlags,
  ListFormat: () => ListFormat,
  LogLevel: () => LogLevel,
  MemberOverrideStatus: () => MemberOverrideStatus,
  ModifierFlags: () => ModifierFlags,
  ModuleDetectionKind: () => ModuleDetectionKind,
  ModuleInstanceState: () => ModuleInstanceState,
  ModuleKind: () => ModuleKind,
  ModuleResolutionKind: () => ModuleResolutionKind,
  ModuleSpecifierEnding: () => ModuleSpecifierEnding,
  NavigateTo: () => ts_NavigateTo_exports,
  NavigationBar: () => ts_NavigationBar_exports,
  NewLineKind: () => NewLineKind,
  NodeBuilderFlags: () => NodeBuilderFlags,
  NodeCheckFlags: () => NodeCheckFlags,
  NodeFactoryFlags: () => NodeFactoryFlags,
  NodeFlags: () => NodeFlags,
  NodeResolutionFeatures: () => NodeResolutionFeatures,
  ObjectFlags: () => ObjectFlags,
  OperationCanceledException: () => OperationCanceledException,
  OperatorPrecedence: () => OperatorPrecedence,
  OrganizeImports: () => ts_OrganizeImports_exports,
  OrganizeImportsMode: () => OrganizeImportsMode,
  OuterExpressionKinds: () => OuterExpressionKinds,
  OutliningElementsCollector: () => ts_OutliningElementsCollector_exports,
  OutliningSpanKind: () => OutliningSpanKind,
  OutputFileType: () => OutputFileType,
  PackageJsonAutoImportPreference: () => PackageJsonAutoImportPreference,
  PackageJsonDependencyGroup: () => PackageJsonDependencyGroup,
  PatternMatchKind: () => PatternMatchKind,
  PollingInterval: () => PollingInterval,
  PollingWatchKind: () => PollingWatchKind,
  PragmaKindFlags: () => PragmaKindFlags,
  PrivateIdentifierKind: () => PrivateIdentifierKind,
  ProcessLevel: () => ProcessLevel,
  ProgramUpdateLevel: () => ProgramUpdateLevel,
  QuotePreference: () => QuotePreference,
  RelationComparisonResult: () => RelationComparisonResult,
  Rename: () => ts_Rename_exports,
  ScriptElementKind: () => ScriptElementKind,
  ScriptElementKindModifier: () => ScriptElementKindModifier,
  ScriptKind: () => ScriptKind,
  ScriptSnapshot: () => ScriptSnapshot,
  ScriptTarget: () => ScriptTarget,
  SemanticClassificationFormat: () => SemanticClassificationFormat,
  SemanticMeaning: () => SemanticMeaning,
  SemicolonPreference: () => SemicolonPreference,
  SignatureCheckMode: () => SignatureCheckMode,
  SignatureFlags: () => SignatureFlags,
  SignatureHelp: () => ts_SignatureHelp_exports,
  SignatureKind: () => SignatureKind,
  SmartSelectionRange: () => ts_SmartSelectionRange_exports,
  SnippetKind: () => SnippetKind,
  SortKind: () => SortKind,
  StructureIsReused: () => StructureIsReused,
  SymbolAccessibility: () => SymbolAccessibility,
  SymbolDisplay: () => ts_SymbolDisplay_exports,
  SymbolDisplayPartKind: () => SymbolDisplayPartKind,
  SymbolFlags: () => SymbolFlags,
  SymbolFormatFlags: () => SymbolFormatFlags,
  SyntaxKind: () => SyntaxKind,
  SyntheticSymbolKind: () => SyntheticSymbolKind,
  Ternary: () => Ternary,
  ThrottledCancellationToken: () => ThrottledCancellationToken,
  TokenClass: () => TokenClass,
  TokenFlags: () => TokenFlags,
  TransformFlags: () => TransformFlags,
  TypeFacts: () => TypeFacts,
  TypeFlags: () => TypeFlags,
  TypeFormatFlags: () => TypeFormatFlags,
  TypeMapKind: () => TypeMapKind,
  TypePredicateKind: () => TypePredicateKind,
  TypeReferenceSerializationKind: () => TypeReferenceSerializationKind,
  UnionReduction: () => UnionReduction,
  UpToDateStatusType: () => UpToDateStatusType,
  VarianceFlags: () => VarianceFlags,
  Version: () => Version,
  VersionRange: () => VersionRange,
  WatchDirectoryFlags: () => WatchDirectoryFlags,
  WatchDirectoryKind: () => WatchDirectoryKind,
  WatchFileKind: () => WatchFileKind,
  WatchLogLevel: () => WatchLogLevel,
  WatchType: () => WatchType,
  accessPrivateIdentifier: () => accessPrivateIdentifier,
  addDisposableResourceHelper: () => addDisposableResourceHelper,
  addEmitFlags: () => addEmitFlags,
  addEmitHelper: () => addEmitHelper,
  addEmitHelpers: () => addEmitHelpers,
  addInternalEmitFlags: () => addInternalEmitFlags,
  addNodeFactoryPatcher: () => addNodeFactoryPatcher,
  addObjectAllocatorPatcher: () => addObjectAllocatorPatcher,
  addRange: () => addRange,
  addRelatedInfo: () => addRelatedInfo,
  addSyntheticLeadingComment: () => addSyntheticLeadingComment,
  addSyntheticTrailingComment: () => addSyntheticTrailingComment,
  addToSeen: () => addToSeen,
  advancedAsyncSuperHelper: () => advancedAsyncSuperHelper,
  affectsDeclarationPathOptionDeclarations: () => affectsDeclarationPathOptionDeclarations,
  affectsEmitOptionDeclarations: () => affectsEmitOptionDeclarations,
  allKeysStartWithDot: () => allKeysStartWithDot,
  altDirectorySeparator: () => altDirectorySeparator,
  and: () => and,
  append: () => append,
  appendIfUnique: () => appendIfUnique,
  arrayFrom: () => arrayFrom,
  arrayIsEqualTo: () => arrayIsEqualTo,
  arrayIsHomogeneous: () => arrayIsHomogeneous,
  arrayIsSorted: () => arrayIsSorted,
  arrayOf: () => arrayOf,
  arrayReverseIterator: () => arrayReverseIterator,
  arrayToMap: () => arrayToMap,
  arrayToMultiMap: () => arrayToMultiMap,
  arrayToNumericMap: () => arrayToNumericMap,
  arraysEqual: () => arraysEqual,
  assertType: () => assertType,
  assign: () => assign,
  assignHelper: () => assignHelper,
  asyncDelegator: () => asyncDelegator,
  asyncGeneratorHelper: () => asyncGeneratorHelper,
  asyncSuperHelper: () => asyncSuperHelper,
  asyncValues: () => asyncValues,
  attachFileToDiagnostics: () => attachFileToDiagnostics,
  awaitHelper: () => awaitHelper,
  awaiterHelper: () => awaiterHelper,
  base64decode: () => base64decode,
  base64encode: () => base64encode,
  binarySearch: () => binarySearch,
  binarySearchKey: () => binarySearchKey,
  bindSourceFile: () => bindSourceFile,
  breakIntoCharacterSpans: () => breakIntoCharacterSpans,
  breakIntoWordSpans: () => breakIntoWordSpans,
  buildLinkParts: () => buildLinkParts,
  buildOpts: () => buildOpts,
  buildOverload: () => buildOverload,
  bundlerModuleNameResolver: () => bundlerModuleNameResolver,
  canBeConvertedToAsync: () => canBeConvertedToAsync,
  canHaveDecorators: () => canHaveDecorators,
  canHaveExportModifier: () => canHaveExportModifier,
  canHaveFlowNode: () => canHaveFlowNode,
  canHaveIllegalDecorators: () => canHaveIllegalDecorators,
  canHaveIllegalModifiers: () => canHaveIllegalModifiers,
  canHaveIllegalType: () => canHaveIllegalType,
  canHaveIllegalTypeParameters: () => canHaveIllegalTypeParameters,
  canHaveJSDoc: () => canHaveJSDoc,
  canHaveLocals: () => canHaveLocals,
  canHaveModifiers: () => canHaveModifiers,
  canHaveSymbol: () => canHaveSymbol,
  canJ